'use strict'

/*
This code is modified from the HS100 API code previously developed by github contributor plasticrake.  Modifications were to add commands for the TP-Link bulbs, delete command I have not tested, and change "plug" to bulb to differentiate the code.

2/12/2017 - Version 1.1.  Completed integration of four bulbs.
2/23/2017 - Version 1.2.  Complete update with additional get commands.
*/

const net = require('net')
const encryptWithHeader = require('./utils').encryptWithHeader
const decrypt = require('./utils').decrypt

class Bulb {
	constructor (options) {
		if (typeof options === 'undefined') options = {}
		this.client = options.client
		this.deviceId = options.deviceId
		this.host = options.host
		this.port = options.port || 9999
		this.seenOnDiscovery = options.seenOnDiscovery || null
		this.timeout = options.timeout || 0
	}
 
	get (command) {
		return new Promise((resolve, reject) => {
		var socket = this.send(command)
		socket.on('data', (data) => {
		data = decrypt(data.slice(4)).toString('ascii')
		try {
			data = JSON.parse(data)
		}
		catch(e) {
			console.log("")
			console.log("***** Error in Parsing Jason data *****")
		}
		socket.end()
		if (!data.err_code || data.err_code === 0) {
			resolve(data)
			} else {
			let errMsg = data
			console.log('TP-Link Device TCP error %j' + data)
			reject(new Error(errMsg))
			}
		resolve(data)
		}).on('timeout', () => {
			socket.end()
			let errMsg = 'TP-Link Device TCP timeout'
			console.error(errMsg)
			reject(new Error(errMsg))
		}).on('error', (err) => {
			console.error('TP-Link Device TCP error')
			console.trace(err)
			socket.end()
			reject(err)
			})
		})
	}

	set (command) {
		return this.get(command)
	}

	getDailyEnergy (month, year) {
		var cmd = `{"smartlife.iot.common.emeter":{"get_daystat":{"month": ${month}, "year": ${year}}}}`
		return this.get(cmd).then(
			data => data['smartlife.iot.common.emeter']['get_daystat']['day_list']
		)
		return
	}

	getMonthlyEnergy (year) {
		var cmd = `{"smartlife.iot.common.emeter":{"get_monthstat":{"year": ${year}}}}`
		return this.get(cmd).then(
			data => data['smartlife.iot.common.emeter']['get_monthstat']['month_list']
		)
		return
	}

	getSchedule () {
		var cmd = '{"smartlife.iot.common.schedule":{"get_rules":{}}}'
		return this.get(cmd).then(
			data => data['smartlife.iot.common.schedule']['get_rules']['rule_list']
		)
		return
	}

	getNextSchedAction () {
		var cmd = '{"smartlife.iot.common.schedule":{"get_next_action":{}}}'
		return this.get(cmd).then(
			data => data['smartlife.iot.common.schedule']['get_next_action']
		)
		return
	}

	getTimerRules () {
		var cmd = '{"smartlife.iot.common.count_down":{"get_rules":{}}}'
		return this.get(cmd).then(
			data => data['smartlife.iot.common.count_down']['get_rules']['rule_list']
		)
		return
	}

	getAntiTheft () {
		var cmd = '{"smartlife.iot.common.anti_theft":{"get_rules":{}}}'
		return this.get(cmd).then(
			data => data['smartlife.iot.common.anti_theft']['get_rules']['rule_list']
		)
		return
	}

	getLightState () {
		var cmd = '{"smartlife.iot.smartbulb.lightingservice":{"get_light_state":{}}}'
		return this.get(cmd).then(
			data => data['smartlife.iot.smartbulb.lightingservice']['get_light_state']
		)
		return
	}

	getLightParameters () {
		var cmd = '{"smartlife.iot.smartbulb.lightingservice":{"get_light_parameters":{}}}'
		return this.get(cmd).then(
			data => data['smartlife.iot.smartbulb.lightingservice']['get_light_parameters']
		)
		return 
	}

	getLightDetails () {
		var cmd = '{"smartlife.iot.smartbulb.lightingservice":{"get_light_details":{}}}'
		return this.get(cmd).then(
			data => data['smartlife.iot.smartbulb.lightingservice']['get_light_details']
		)
		return 
	}

	getLightWattage () {
		var cmd = '{"smartlife.iot.common.emeter":{"get_realtime":{}}}'
		return this.get(cmd).then(
			data => data['smartlife.iot.common.emeter']['get_realtime']
		)
		return
	}

	getLightPreferredStates () {
		var cmd = '{"smartlife.iot.smartbulb.lightingservice":{"get_preferred_state":{}}}'
		return this.get(cmd).then(
			data => data['smartlife.iot.smartbulb.lightingservice']['get_preferred_state']
		)
		return
	}

	getLightDefaultBehavior () {
		var cmd = '{"smartlife.iot.smartbulb.lightingservice":{"get_default_behavior":{}}}'
		return this.get(cmd).then(
			data => data['smartlife.iot.smartbulb.lightingservice']['get_default_behavior']
		)
		return
	}

	getLightOptions () {
		var cmd = '{"smartlife.iot.smartbulb.lightingservice":{"get_opts":{}}}'
		return this.get(cmd).then(
			data => data['smartlife.iot.smartbulb.lightingservice']['get_opts']
		)
		return
	}
	getSysInfo () {
		var cmd = '{"system":{"get_sysinfo":{}}}'
		return this.get(cmd).then(
			data => data['system']['get_sysinfo']
		)
		return
	}

	getAlias () {
		return this.getSysInfo().then((sysInfo) => {
			return (sysInfo.alias)
    		})
	}

	getModel () {
		return this.getSysInfo().then((sysInfo) => {
			return (sysInfo.model)
    		})
	}
 
	getMACAddress () {
		return this.getSysInfo().then((sysInfo) => {
			return (sysInfo.mic_mac)
    		})
	}

	getCloudInfo () {
		var cmd = `{"smartlife.iot.common.cloud":{"get_info":{}}}`
		return this.get(cmd).then(
			data => data['smartlife.iot.common.cloud']['get_info']
		)
		return
	}

//	***** Turn the light on with a transition period *****
	setLightOnWithTrans (power, transition) {
		var cmd = `{"smartlife.iot.smartbulb.lightingservice": {
			"transition_light_state": {
				"on_off":${(power ? 1 : 0)},
				"transition_period":${transition}
				}
			}
		}`
		return this.set(cmd)
	}

//	***** Set a light option (on/off, brightness, color temperature) *****
	setLightState (lightState, stateValue) {
		if(lightState == '"hue"') {
			console.log("ERROR: Can not set Hue with SetlightState")
			return}
		if(lightState == '"saturation"') {
			console.log("ERROR: Can not set Saturation with SetlightState")
			return}
		var cmd = `{"smartlife.iot.smartbulb.lightingservice": {
			"transition_light_state": {
				${lightState}:${stateValue}
				}
			}
		}`
		return this.set(cmd)
	}

	setLightColor (hue, saturation) {
		var cmd = `{"smartlife.iot.smartbulb.lightingservice": {
			"transition_light_state": {
				"color_temp": 0,
				"hue":${hue},
				"saturation":${saturation}
				}
			}
		}`
	return this.set(cmd)
	}

	send (payload) {
		var socket = net.connect(this.port, this.host)
		socket.setKeepAlive(false)
		socket.setTimeout(this.timeout)
    		socket.on('connect', () => {
  			socket.write(encryptWithHeader(payload))
    		})
		socket.on('timeout', () => {
			socket.end()
		})
		socket.on('end', () => {
			socket.end()
		})

		return socket
	}

}

module.exports = Bulb
